// Code generated by mockery v1.0.0. DO NOT EDIT.

package integrations

import mock "github.com/stretchr/testify/mock"
import time "time"
import toggl "github.com/toggl/pipes-api/pkg/toggl"

// MockExternalService is an autogenerated mock type for the ExternalService type
type MockExternalService struct {
	mock.Mock
}

// Accounts provides a mock function with given fields:
func (_m *MockExternalService) Accounts() ([]*toggl.Account, error) {
	ret := _m.Called()

	var r0 []*toggl.Account
	if rf, ok := ret.Get(0).(func() []*toggl.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*toggl.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clients provides a mock function with given fields:
func (_m *MockExternalService) Clients() ([]*toggl.Client, error) {
	ret := _m.Called()

	var r0 []*toggl.Client
	if rf, ok := ret.Get(0).(func() []*toggl.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*toggl.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportTimeEntry provides a mock function with given fields: _a0
func (_m *MockExternalService) ExportTimeEntry(_a0 *toggl.TimeEntry) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(*toggl.TimeEntry) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*toggl.TimeEntry) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceID provides a mock function with given fields:
func (_m *MockExternalService) GetWorkspaceID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *MockExternalService) ID() ExternalServiceID {
	ret := _m.Called()

	var r0 ExternalServiceID
	if rf, ok := ret.Get(0).(func() ExternalServiceID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ExternalServiceID)
	}

	return r0
}

// KeyFor provides a mock function with given fields: _a0
func (_m *MockExternalService) KeyFor(_a0 PipeID) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(PipeID) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Projects provides a mock function with given fields:
func (_m *MockExternalService) Projects() ([]*toggl.Project, error) {
	ret := _m.Called()

	var r0 []*toggl.Project
	if rf, ok := ret.Get(0).(func() []*toggl.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*toggl.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAuthData provides a mock function with given fields: _a0
func (_m *MockExternalService) SetAuthData(_a0 []byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetParams provides a mock function with given fields: _a0
func (_m *MockExternalService) SetParams(_a0 []byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSince provides a mock function with given fields: _a0
func (_m *MockExternalService) SetSince(_a0 *time.Time) {
	_m.Called(_a0)
}

// Tasks provides a mock function with given fields:
func (_m *MockExternalService) Tasks() ([]*toggl.Task, error) {
	ret := _m.Called()

	var r0 []*toggl.Task
	if rf, ok := ret.Get(0).(func() []*toggl.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*toggl.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoLists provides a mock function with given fields:
func (_m *MockExternalService) TodoLists() ([]*toggl.Task, error) {
	ret := _m.Called()

	var r0 []*toggl.Task
	if rf, ok := ret.Get(0).(func() []*toggl.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*toggl.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields:
func (_m *MockExternalService) Users() ([]*toggl.User, error) {
	ret := _m.Called()

	var r0 []*toggl.User
	if rf, ok := ret.Get(0).(func() []*toggl.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*toggl.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
