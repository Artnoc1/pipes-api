// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/toggl/pipes-api/pkg/domain"
)

// AuthorizationService is an autogenerated mock type for the AuthorizationService type
type AuthorizationService struct {
	mock.Mock
}

// CreateAuthorization provides a mock function with given fields: workspaceID, sid, workspaceToken, params
func (_m *AuthorizationService) CreateAuthorization(workspaceID int, sid domain.IntegrationID, workspaceToken string, params domain.AuthParams) error {
	ret := _m.Called(workspaceID, sid, workspaceToken, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain.IntegrationID, string, domain.AuthParams) error); ok {
		r0 = rf(workspaceID, sid, workspaceToken, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAuthorization provides a mock function with given fields: workspaceID, sid
func (_m *AuthorizationService) DeleteAuthorization(workspaceID int, sid domain.IntegrationID) error {
	ret := _m.Called(workspaceID, sid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain.IntegrationID) error); ok {
		r0 = rf(workspaceID, sid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAuthURL provides a mock function with given fields: sid, accountName, callbackURL
func (_m *AuthorizationService) GetAuthURL(sid domain.IntegrationID, accountName string, callbackURL string) (string, error) {
	ret := _m.Called(sid, accountName, callbackURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(domain.IntegrationID, string, string) string); ok {
		r0 = rf(sid, accountName, callbackURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IntegrationID, string, string) error); ok {
		r1 = rf(sid, accountName, callbackURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
