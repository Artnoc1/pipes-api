// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/toggl/pipes-api/pkg/domain"

	time "time"
)

// PipeIntegration is an autogenerated mock type for the PipeIntegration type
type PipeIntegration struct {
	mock.Mock
}

// Accounts provides a mock function with given fields:
func (_m *PipeIntegration) Accounts() ([]*domain.Account, error) {
	ret := _m.Called()

	var r0 []*domain.Account
	if rf, ok := ret.Get(0).(func() []*domain.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clients provides a mock function with given fields:
func (_m *PipeIntegration) Clients() ([]*domain.Client, error) {
	ret := _m.Called()

	var r0 []*domain.Client
	if rf, ok := ret.Get(0).(func() []*domain.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportTimeEntry provides a mock function with given fields: _a0
func (_m *PipeIntegration) ExportTimeEntry(_a0 *domain.TimeEntry) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(*domain.TimeEntry) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.TimeEntry) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceID provides a mock function with given fields:
func (_m *PipeIntegration) GetWorkspaceID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IntegrationID provides a mock function with given fields:
func (_m *PipeIntegration) ID() domain.IntegrationID {
	ret := _m.Called()

	var r0 domain.IntegrationID
	if rf, ok := ret.Get(0).(func() domain.IntegrationID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.IntegrationID)
	}

	return r0
}

// KeyFor provides a mock function with given fields: _a0
func (_m *PipeIntegration) KeyFor(_a0 domain.PipeID) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(domain.PipeID) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Projects provides a mock function with given fields:
func (_m *PipeIntegration) Projects() ([]*domain.Project, error) {
	ret := _m.Called()

	var r0 []*domain.Project
	if rf, ok := ret.Get(0).(func() []*domain.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAuthData provides a mock function with given fields: _a0
func (_m *PipeIntegration) SetAuthData(_a0 []byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetParams provides a mock function with given fields: _a0
func (_m *PipeIntegration) SetParams(_a0 []byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSince provides a mock function with given fields: _a0
func (_m *PipeIntegration) SetSince(_a0 *time.Time) {
	_m.Called(_a0)
}

// Tasks provides a mock function with given fields:
func (_m *PipeIntegration) Tasks() ([]*domain.Task, error) {
	ret := _m.Called()

	var r0 []*domain.Task
	if rf, ok := ret.Get(0).(func() []*domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoLists provides a mock function with given fields:
func (_m *PipeIntegration) TodoLists() ([]*domain.Task, error) {
	ret := _m.Called()

	var r0 []*domain.Task
	if rf, ok := ret.Get(0).(func() []*domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields:
func (_m *PipeIntegration) Users() ([]*domain.User, error) {
	ret := _m.Called()

	var r0 []*domain.User
	if rf, ok := ret.Get(0).(func() []*domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
