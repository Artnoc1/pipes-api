// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/toggl/pipes-api/pkg/domain"

	time "time"
)

// TogglClient is an autogenerated mock type for the TogglClient type
type TogglClient struct {
	mock.Mock
}

// AdjustRequestSize provides a mock function with given fields: tasks, split
func (_m *TogglClient) AdjustRequestSize(tasks []*domain.Task, split int) ([]*domain.TaskRequest, error) {
	ret := _m.Called(tasks, split)

	var r0 []*domain.TaskRequest
	if rf, ok := ret.Get(0).(func([]*domain.Task, int) []*domain.TaskRequest); ok {
		r0 = rf(tasks, split)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.TaskRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*domain.Task, int) error); ok {
		r1 = rf(tasks, split)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimeEntries provides a mock function with given fields: lastSync, userIDs, projectsIDs
func (_m *TogglClient) GetTimeEntries(lastSync time.Time, userIDs []int, projectsIDs []int) ([]domain.TimeEntry, error) {
	ret := _m.Called(lastSync, userIDs, projectsIDs)

	var r0 []domain.TimeEntry
	if rf, ok := ret.Get(0).(func(time.Time, []int, []int) []domain.TimeEntry); ok {
		r0 = rf(lastSync, userIDs, projectsIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, []int, []int) error); ok {
		r1 = rf(lastSync, userIDs, projectsIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceIdByToken provides a mock function with given fields: token
func (_m *TogglClient) GetWorkspaceIdByToken(token string) (int, error) {
	ret := _m.Called(token)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *TogglClient) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostClients provides a mock function with given fields: clientsPipeID, clients
func (_m *TogglClient) PostClients(clientsPipeID domain.PipeID, clients interface{}) (*domain.ClientsImport, error) {
	ret := _m.Called(clientsPipeID, clients)

	var r0 *domain.ClientsImport
	if rf, ok := ret.Get(0).(func(domain.PipeID, interface{}) *domain.ClientsImport); ok {
		r0 = rf(clientsPipeID, clients)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ClientsImport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.PipeID, interface{}) error); ok {
		r1 = rf(clientsPipeID, clients)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjects provides a mock function with given fields: projectsPipeID, projects
func (_m *TogglClient) PostProjects(projectsPipeID domain.PipeID, projects interface{}) (*domain.ProjectsImport, error) {
	ret := _m.Called(projectsPipeID, projects)

	var r0 *domain.ProjectsImport
	if rf, ok := ret.Get(0).(func(domain.PipeID, interface{}) *domain.ProjectsImport); ok {
		r0 = rf(projectsPipeID, projects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProjectsImport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.PipeID, interface{}) error); ok {
		r1 = rf(projectsPipeID, projects)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTasks provides a mock function with given fields: tasksPipeID, tasks
func (_m *TogglClient) PostTasks(tasksPipeID domain.PipeID, tasks interface{}) (*domain.TasksImport, error) {
	ret := _m.Called(tasksPipeID, tasks)

	var r0 *domain.TasksImport
	if rf, ok := ret.Get(0).(func(domain.PipeID, interface{}) *domain.TasksImport); ok {
		r0 = rf(tasksPipeID, tasks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TasksImport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.PipeID, interface{}) error); ok {
		r1 = rf(tasksPipeID, tasks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTodoLists provides a mock function with given fields: tasksPipeID, tasks
func (_m *TogglClient) PostTodoLists(tasksPipeID domain.PipeID, tasks interface{}) (*domain.TasksImport, error) {
	ret := _m.Called(tasksPipeID, tasks)

	var r0 *domain.TasksImport
	if rf, ok := ret.Get(0).(func(domain.PipeID, interface{}) *domain.TasksImport); ok {
		r0 = rf(tasksPipeID, tasks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TasksImport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.PipeID, interface{}) error); ok {
		r1 = rf(tasksPipeID, tasks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostUsers provides a mock function with given fields: usersPipeID, users
func (_m *TogglClient) PostUsers(usersPipeID domain.PipeID, users interface{}) (*domain.UsersImport, error) {
	ret := _m.Called(usersPipeID, users)

	var r0 *domain.UsersImport
	if rf, ok := ret.Get(0).(func(domain.PipeID, interface{}) *domain.UsersImport); ok {
		r0 = rf(usersPipeID, users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UsersImport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.PipeID, interface{}) error); ok {
		r1 = rf(usersPipeID, users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithAuthToken provides a mock function with given fields: authToken
func (_m *TogglClient) WithAuthToken(authToken string) {
	_m.Called(authToken)
}
