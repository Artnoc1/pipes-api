// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/toggl/pipes-api/pkg/domain"
)

// PipeService is an autogenerated mock type for the PipeService type
type PipeService struct {
	mock.Mock
}

// CreatePipe provides a mock function with given fields: workspaceID, sid, pid, params
func (_m *PipeService) CreatePipe(workspaceID int, sid domain.IntegrationID, pid domain.PipeID, params []byte) error {
	ret := _m.Called(workspaceID, sid, pid, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain.IntegrationID, domain.PipeID, []byte) error); ok {
		r0 = rf(workspaceID, sid, pid, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePipe provides a mock function with given fields: workspaceID, sid, pid
func (_m *PipeService) DeletePipe(workspaceID int, sid domain.IntegrationID, pid domain.PipeID) error {
	ret := _m.Called(workspaceID, sid, pid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain.IntegrationID, domain.PipeID) error); ok {
		r0 = rf(workspaceID, sid, pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPipe provides a mock function with given fields: workspaceID, sid, pid
func (_m *PipeService) GetPipe(workspaceID int, sid domain.IntegrationID, pid domain.PipeID) (*domain.Pipe, error) {
	ret := _m.Called(workspaceID, sid, pid)

	var r0 *domain.Pipe
	if rf, ok := ret.Get(0).(func(int, domain.IntegrationID, domain.PipeID) *domain.Pipe); ok {
		r0 = rf(workspaceID, sid, pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.IntegrationID, domain.PipeID) error); ok {
		r1 = rf(workspaceID, sid, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePipe provides a mock function with given fields: workspaceID, sid, pid, params
func (_m *PipeService) UpdatePipe(workspaceID int, sid domain.IntegrationID, pid domain.PipeID, params []byte) error {
	ret := _m.Called(workspaceID, sid, pid, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain.IntegrationID, domain.PipeID, []byte) error); ok {
		r0 = rf(workspaceID, sid, pid, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
