// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	integration "github.com/toggl/pipes-api/pkg/integration"

	oauth "code.google.com/p/goauth2/oauth"

	oauthplain "github.com/tambet/oauthplain"
)

// OAuthProvider is an autogenerated mock type for the OAuthProvider type
type OAuthProvider struct {
	mock.Mock
}

// OAuth1Configs provides a mock function with given fields: _a0
func (_m *OAuthProvider) OAuth1Configs(_a0 integration.ID) (*oauthplain.Config, bool) {
	ret := _m.Called(_a0)

	var r0 *oauthplain.Config
	if rf, ok := ret.Get(0).(func(integration.ID) *oauthplain.Config); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauthplain.Config)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(integration.ID) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// OAuth1Exchange provides a mock function with given fields: sid, accountName, oAuthToken, oAuthVerifier
func (_m *OAuthProvider) OAuth1Exchange(sid integration.ID, accountName string, oAuthToken string, oAuthVerifier string) (*oauthplain.Token, error) {
	ret := _m.Called(sid, accountName, oAuthToken, oAuthVerifier)

	var r0 *oauthplain.Token
	if rf, ok := ret.Get(0).(func(integration.ID, string, string, string) *oauthplain.Token); ok {
		r0 = rf(sid, accountName, oAuthToken, oAuthVerifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauthplain.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integration.ID, string, string, string) error); ok {
		r1 = rf(sid, accountName, oAuthToken, oAuthVerifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OAuth2Configs provides a mock function with given fields: _a0
func (_m *OAuthProvider) OAuth2Configs(_a0 integration.ID) (*oauth.Config, bool) {
	ret := _m.Called(_a0)

	var r0 *oauth.Config
	if rf, ok := ret.Get(0).(func(integration.ID) *oauth.Config); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth.Config)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(integration.ID) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// OAuth2Exchange provides a mock function with given fields: sid, code
func (_m *OAuthProvider) OAuth2Exchange(sid integration.ID, code string) (*oauth.Token, error) {
	ret := _m.Called(sid, code)

	var r0 *oauth.Token
	if rf, ok := ret.Get(0).(func(integration.ID, string) *oauth.Token); ok {
		r0 = rf(sid, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integration.ID, string) error); ok {
		r1 = rf(sid, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OAuth2Refresh provides a mock function with given fields: _a0, _a1
func (_m *OAuthProvider) OAuth2Refresh(_a0 *oauth.Config, _a1 *oauth.Token) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*oauth.Config, *oauth.Token) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OAuth2URL provides a mock function with given fields: _a0
func (_m *OAuthProvider) OAuth2URL(_a0 integration.ID) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(integration.ID) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
