// Code generated by mockery v1.0.0. DO NOT EDIT.

package pipe

import (
	mock "github.com/stretchr/testify/mock"
	integration "github.com/toggl/pipes-api/pkg/integration"
)

// MockPipesStorage is an autogenerated mock type for the PipesStorage type
type MockPipesStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: p, workspaceID
func (_m *MockPipesStorage) Delete(p *Pipe, workspaceID int) error {
	ret := _m.Called(p, workspaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Pipe, int) error); ok {
		r0 = rf(p, workspaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByWorkspaceIDServiceID provides a mock function with given fields: workspaceID, sid
func (_m *MockPipesStorage) DeleteByWorkspaceIDServiceID(workspaceID int, sid integration.ID) error {
	ret := _m.Called(workspaceID, sid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integration.ID) error); ok {
		r0 = rf(workspaceID, sid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsDown provides a mock function with given fields:
func (_m *MockPipesStorage) IsDown() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Load provides a mock function with given fields: workspaceID, sid, pid
func (_m *MockPipesStorage) Load(workspaceID int, sid integration.ID, pid integration.PipeID) (*Pipe, error) {
	ret := _m.Called(workspaceID, sid, pid)

	var r0 *Pipe
	if rf, ok := ret.Get(0).(func(int, integration.ID, integration.PipeID) *Pipe); ok {
		r0 = rf(workspaceID, sid, pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, integration.ID, integration.PipeID) error); ok {
		r1 = rf(workspaceID, sid, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAll provides a mock function with given fields: workspaceID
func (_m *MockPipesStorage) LoadAll(workspaceID int) (map[string]*Pipe, error) {
	ret := _m.Called(workspaceID)

	var r0 map[string]*Pipe
	if rf, ok := ret.Get(0).(func(int) map[string]*Pipe); ok {
		r0 = rf(workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*Pipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAllStatuses provides a mock function with given fields: workspaceID
func (_m *MockPipesStorage) LoadAllStatuses(workspaceID int) (map[string]*Status, error) {
	ret := _m.Called(workspaceID)

	var r0 map[string]*Status
	if rf, ok := ret.Get(0).(func(int) map[string]*Status); ok {
		r0 = rf(workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadLastSyncFor provides a mock function with given fields: p
func (_m *MockPipesStorage) LoadLastSyncFor(p *Pipe) {
	_m.Called(p)
}

// LoadStatus provides a mock function with given fields: workspaceID, sid, pid
func (_m *MockPipesStorage) LoadStatus(workspaceID int, sid integration.ID, pid integration.PipeID) (*Status, error) {
	ret := _m.Called(workspaceID, sid, pid)

	var r0 *Status
	if rf, ok := ret.Get(0).(func(int, integration.ID, integration.PipeID) *Status); ok {
		r0 = rf(workspaceID, sid, pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, integration.ID, integration.PipeID) error); ok {
		r1 = rf(workspaceID, sid, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: p
func (_m *MockPipesStorage) Save(p *Pipe) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Pipe) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveStatus provides a mock function with given fields: p
func (_m *MockPipesStorage) SaveStatus(p *Status) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Status) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
