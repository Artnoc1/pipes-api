// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	integration "github.com/toggl/pipes-api/pkg/integration"

	pipe "github.com/toggl/pipes-api/pkg/pipe"
)

// AuthorizationsStorage is an autogenerated mock type for the AuthorizationsStorage type
type AuthorizationsStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: workspaceID, externalServiceID
func (_m *AuthorizationsStorage) Delete(workspaceID int, externalServiceID integration.ID) error {
	ret := _m.Called(workspaceID, externalServiceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integration.ID) error); ok {
		r0 = rf(workspaceID, externalServiceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Load provides a mock function with given fields: workspaceID, externalServiceID, a
func (_m *AuthorizationsStorage) Load(workspaceID int, externalServiceID integration.ID, a *pipe.Authorization) error {
	ret := _m.Called(workspaceID, externalServiceID, a)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integration.ID, *pipe.Authorization) error); ok {
		r0 = rf(workspaceID, externalServiceID, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadWorkspaceAuthorizations provides a mock function with given fields: workspaceID
func (_m *AuthorizationsStorage) LoadWorkspaceAuthorizations(workspaceID int) (map[integration.ID]bool, error) {
	ret := _m.Called(workspaceID)

	var r0 map[integration.ID]bool
	if rf, ok := ret.Get(0).(func(int) map[integration.ID]bool); ok {
		r0 = rf(workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[integration.ID]bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: a
func (_m *AuthorizationsStorage) Save(a *pipe.Authorization) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipe.Authorization) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
