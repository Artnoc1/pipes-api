// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import integrations "github.com/toggl/pipes-api/pkg/integrations"
import mock "github.com/stretchr/testify/mock"
import pipe "github.com/toggl/pipes-api/pkg/pipe"
import toggl "github.com/toggl/pipes-api/pkg/toggl"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// ClearImportFor provides a mock function with given fields: s, pid
func (_m *Storage) ClearImportFor(s integrations.ExternalService, pid integrations.PipeID) error {
	ret := _m.Called(s, pid)

	var r0 error
	if rf, ok := ret.Get(0).(func(integrations.ExternalService, integrations.PipeID) error); ok {
		r0 = rf(s, pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePipeByWorkspaceIDServiceID provides a mock function with given fields: workspaceID, sid
func (_m *Storage) DeletePipeByWorkspaceIDServiceID(workspaceID int, sid integrations.ExternalServiceID) error {
	ret := _m.Called(workspaceID, sid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID) error); ok {
		r0 = rf(workspaceID, sid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePipeConnections provides a mock function with given fields: workspaceID, pipeConnectionKey, pipeStatusKey
func (_m *Storage) DeletePipeConnections(workspaceID int, pipeConnectionKey string, pipeStatusKey string) error {
	ret := _m.Called(workspaceID, pipeConnectionKey, pipeStatusKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(workspaceID, pipeConnectionKey, pipeStatusKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields: p, workspaceID
func (_m *Storage) Destroy(p *pipe.Pipe, workspaceID int) error {
	ret := _m.Called(p, workspaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipe.Pipe, int) error); ok {
		r0 = rf(p, workspaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroyAuthorization provides a mock function with given fields: workspaceID, externalServiceID
func (_m *Storage) DestroyAuthorization(workspaceID int, externalServiceID integrations.ExternalServiceID) error {
	ret := _m.Called(workspaceID, externalServiceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID) error); ok {
		r0 = rf(workspaceID, externalServiceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccounts provides a mock function with given fields: s
func (_m *Storage) GetAccounts(s integrations.ExternalService) (*toggl.AccountsResponse, error) {
	ret := _m.Called(s)

	var r0 *toggl.AccountsResponse
	if rf, ok := ret.Get(0).(func(integrations.ExternalService) *toggl.AccountsResponse); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*toggl.AccountsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.ExternalService) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObject provides a mock function with given fields: s, pid
func (_m *Storage) GetObject(s integrations.ExternalService, pid integrations.PipeID) ([]byte, error) {
	ret := _m.Called(s, pid)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(integrations.ExternalService, integrations.PipeID) []byte); ok {
		r0 = rf(s, pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.ExternalService, integrations.PipeID) error); ok {
		r1 = rf(s, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipesFromQueue provides a mock function with given fields:
func (_m *Storage) GetPipesFromQueue() ([]*pipe.Pipe, error) {
	ret := _m.Called()

	var r0 []*pipe.Pipe
	if rf, ok := ret.Get(0).(func() []*pipe.Pipe); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pipe.Pipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDown provides a mock function with given fields:
func (_m *Storage) IsDown() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LoadAuthorization provides a mock function with given fields: workspaceID, sid
func (_m *Storage) LoadAuthorization(workspaceID int, sid integrations.ExternalServiceID) (*pipe.Authorization, error) {
	ret := _m.Called(workspaceID, sid)

	var r0 *pipe.Authorization
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID) *pipe.Authorization); ok {
		r0 = rf(workspaceID, sid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipe.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, integrations.ExternalServiceID) error); ok {
		r1 = rf(workspaceID, sid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadConnection provides a mock function with given fields: workspaceID, key
func (_m *Storage) LoadConnection(workspaceID int, key string) (*pipe.Connection, error) {
	ret := _m.Called(workspaceID, key)

	var r0 *pipe.Connection
	if rf, ok := ret.Get(0).(func(int, string) *pipe.Connection); ok {
		r0 = rf(workspaceID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipe.Connection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(workspaceID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadLastSync provides a mock function with given fields: p
func (_m *Storage) LoadLastSync(p *pipe.Pipe) {
	_m.Called(p)
}

// LoadPipe provides a mock function with given fields: workspaceID, sid, pid
func (_m *Storage) LoadPipe(workspaceID int, sid integrations.ExternalServiceID, pid integrations.PipeID) (*pipe.Pipe, error) {
	ret := _m.Called(workspaceID, sid, pid)

	var r0 *pipe.Pipe
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, integrations.PipeID) *pipe.Pipe); ok {
		r0 = rf(workspaceID, sid, pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipe.Pipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, integrations.ExternalServiceID, integrations.PipeID) error); ok {
		r1 = rf(workspaceID, sid, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadPipeStatus provides a mock function with given fields: workspaceID, sid, pid
func (_m *Storage) LoadPipeStatus(workspaceID int, sid integrations.ExternalServiceID, pid integrations.PipeID) (*pipe.Status, error) {
	ret := _m.Called(workspaceID, sid, pid)

	var r0 *pipe.Status
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, integrations.PipeID) *pipe.Status); ok {
		r0 = rf(workspaceID, sid, pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipe.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, integrations.ExternalServiceID, integrations.PipeID) error); ok {
		r1 = rf(workspaceID, sid, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadPipeStatuses provides a mock function with given fields: workspaceID
func (_m *Storage) LoadPipeStatuses(workspaceID int) (map[string]*pipe.Status, error) {
	ret := _m.Called(workspaceID)

	var r0 map[string]*pipe.Status
	if rf, ok := ret.Get(0).(func(int) map[string]*pipe.Status); ok {
		r0 = rf(workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pipe.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadPipes provides a mock function with given fields: workspaceID
func (_m *Storage) LoadPipes(workspaceID int) (map[string]*pipe.Pipe, error) {
	ret := _m.Called(workspaceID)

	var r0 map[string]*pipe.Pipe
	if rf, ok := ret.Get(0).(func(int) map[string]*pipe.Pipe); ok {
		r0 = rf(workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pipe.Pipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadReversedConnection provides a mock function with given fields: workspaceID, key
func (_m *Storage) LoadReversedConnection(workspaceID int, key string) (*pipe.ReversedConnection, error) {
	ret := _m.Called(workspaceID, key)

	var r0 *pipe.ReversedConnection
	if rf, ok := ret.Get(0).(func(int, string) *pipe.ReversedConnection); ok {
		r0 = rf(workspaceID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipe.ReversedConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(workspaceID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadWorkspaceAuthorizations provides a mock function with given fields: workspaceID
func (_m *Storage) LoadWorkspaceAuthorizations(workspaceID int) (map[integrations.ExternalServiceID]bool, error) {
	ret := _m.Called(workspaceID)

	var r0 map[integrations.ExternalServiceID]bool
	if rf, ok := ret.Get(0).(func(int) map[integrations.ExternalServiceID]bool); ok {
		r0 = rf(workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[integrations.ExternalServiceID]bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueAutomaticPipes provides a mock function with given fields:
func (_m *Storage) QueueAutomaticPipes() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueuePipeAsFirst provides a mock function with given fields: _a0
func (_m *Storage) QueuePipeAsFirst(_a0 *pipe.Pipe) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipe.Pipe) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: p
func (_m *Storage) Save(p *pipe.Pipe) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipe.Pipe) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAccounts provides a mock function with given fields: s
func (_m *Storage) SaveAccounts(s integrations.ExternalService) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(integrations.ExternalService) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAuthorization provides a mock function with given fields: a
func (_m *Storage) SaveAuthorization(a *pipe.Authorization) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipe.Authorization) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveConnection provides a mock function with given fields: c
func (_m *Storage) SaveConnection(c *pipe.Connection) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipe.Connection) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveObject provides a mock function with given fields: workspaceID, objKey, obj
func (_m *Storage) SaveObject(workspaceID int, objKey string, obj interface{}) error {
	ret := _m.Called(workspaceID, objKey, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, interface{}) error); ok {
		r0 = rf(workspaceID, objKey, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePipeStatus provides a mock function with given fields: p
func (_m *Storage) SavePipeStatus(p *pipe.Status) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipe.Status) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetQueuedPipeSynced provides a mock function with given fields: _a0
func (_m *Storage) SetQueuedPipeSynced(_a0 *pipe.Pipe) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipe.Pipe) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
