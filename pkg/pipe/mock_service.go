// Code generated by mockery v1.0.0. DO NOT EDIT.

package pipe

import integrations "github.com/toggl/pipes-api/pkg/integrations"
import mock "github.com/stretchr/testify/mock"
import toggl "github.com/toggl/pipes-api/pkg/toggl"

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// AvailablePipeType provides a mock function with given fields: pipeID
func (_m *MockService) AvailablePipeType(pipeID integrations.PipeID) bool {
	ret := _m.Called(pipeID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(integrations.PipeID) bool); ok {
		r0 = rf(pipeID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AvailableServiceType provides a mock function with given fields: serviceID
func (_m *MockService) AvailableServiceType(serviceID integrations.ExternalServiceID) bool {
	ret := _m.Called(serviceID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(integrations.ExternalServiceID) bool); ok {
		r0 = rf(serviceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ClearPipeConnections provides a mock function with given fields: workspaceID, serviceID, pipeID
func (_m *MockService) ClearPipeConnections(workspaceID int, serviceID integrations.ExternalServiceID, pipeID integrations.PipeID) error {
	ret := _m.Called(workspaceID, serviceID, pipeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, integrations.PipeID) error); ok {
		r0 = rf(workspaceID, serviceID, pipeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAuthorization provides a mock function with given fields: workspaceID, serviceID, currentWorkspaceToken, oAuthRawData
func (_m *MockService) CreateAuthorization(workspaceID int, serviceID integrations.ExternalServiceID, currentWorkspaceToken string, oAuthRawData []byte) error {
	ret := _m.Called(workspaceID, serviceID, currentWorkspaceToken, oAuthRawData)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, string, []byte) error); ok {
		r0 = rf(workspaceID, serviceID, currentWorkspaceToken, oAuthRawData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePipe provides a mock function with given fields: workspaceID, serviceID, pipeID, params
func (_m *MockService) CreatePipe(workspaceID int, serviceID integrations.ExternalServiceID, pipeID integrations.PipeID, params []byte) error {
	ret := _m.Called(workspaceID, serviceID, pipeID, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, integrations.PipeID, []byte) error); ok {
		r0 = rf(workspaceID, serviceID, pipeID, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAuthorization provides a mock function with given fields: workspaceID, serviceID
func (_m *MockService) DeleteAuthorization(workspaceID int, serviceID integrations.ExternalServiceID) error {
	ret := _m.Called(workspaceID, serviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID) error); ok {
		r0 = rf(workspaceID, serviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePipe provides a mock function with given fields: workspaceID, serviceID, pipeID
func (_m *MockService) DeletePipe(workspaceID int, serviceID integrations.ExternalServiceID, pipeID integrations.PipeID) error {
	ret := _m.Called(workspaceID, serviceID, pipeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, integrations.PipeID) error); ok {
		r0 = rf(workspaceID, serviceID, pipeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAuthURL provides a mock function with given fields: serviceID, accountName, callbackURL
func (_m *MockService) GetAuthURL(serviceID integrations.ExternalServiceID, accountName string, callbackURL string) (string, error) {
	ret := _m.Called(serviceID, accountName, callbackURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(integrations.ExternalServiceID, string, string) string); ok {
		r0 = rf(serviceID, accountName, callbackURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.ExternalServiceID, string, string) error); ok {
		r1 = rf(serviceID, accountName, callbackURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationPipe provides a mock function with given fields: workspaceID, serviceID, pipeID
func (_m *MockService) GetIntegrationPipe(workspaceID int, serviceID integrations.ExternalServiceID, pipeID integrations.PipeID) (*Pipe, error) {
	ret := _m.Called(workspaceID, serviceID, pipeID)

	var r0 *Pipe
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, integrations.PipeID) *Pipe); ok {
		r0 = rf(workspaceID, serviceID, pipeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, integrations.ExternalServiceID, integrations.PipeID) error); ok {
		r1 = rf(workspaceID, serviceID, pipeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipesFromQueue provides a mock function with given fields:
func (_m *MockService) GetPipesFromQueue() ([]*Pipe, error) {
	ret := _m.Called()

	var r0 []*Pipe
	if rf, ok := ret.Get(0).(func() []*Pipe); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Pipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAccounts provides a mock function with given fields: workspaceID, serviceID, forceImport
func (_m *MockService) GetServiceAccounts(workspaceID int, serviceID integrations.ExternalServiceID, forceImport bool) (*toggl.AccountsResponse, error) {
	ret := _m.Called(workspaceID, serviceID, forceImport)

	var r0 *toggl.AccountsResponse
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, bool) *toggl.AccountsResponse); ok {
		r0 = rf(workspaceID, serviceID, forceImport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*toggl.AccountsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, integrations.ExternalServiceID, bool) error); ok {
		r1 = rf(workspaceID, serviceID, forceImport)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicePipeLog provides a mock function with given fields: workspaceID, serviceID, pipeID
func (_m *MockService) GetServicePipeLog(workspaceID int, serviceID integrations.ExternalServiceID, pipeID integrations.PipeID) (string, error) {
	ret := _m.Called(workspaceID, serviceID, pipeID)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, integrations.PipeID) string); ok {
		r0 = rf(workspaceID, serviceID, pipeID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, integrations.ExternalServiceID, integrations.PipeID) error); ok {
		r1 = rf(workspaceID, serviceID, pipeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceUsers provides a mock function with given fields: workspaceID, serviceID, forceImport
func (_m *MockService) GetServiceUsers(workspaceID int, serviceID integrations.ExternalServiceID, forceImport bool) (*toggl.UsersResponse, error) {
	ret := _m.Called(workspaceID, serviceID, forceImport)

	var r0 *toggl.UsersResponse
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, bool) *toggl.UsersResponse); ok {
		r0 = rf(workspaceID, serviceID, forceImport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*toggl.UsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, integrations.ExternalServiceID, bool) error); ok {
		r1 = rf(workspaceID, serviceID, forceImport)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueAutomaticPipes provides a mock function with given fields:
func (_m *MockService) QueueAutomaticPipes() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *MockService) Ready() []error {
	ret := _m.Called()

	var r0 []error
	if rf, ok := ret.Get(0).(func() []error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// Run provides a mock function with given fields: _a0
func (_m *MockService) Run(_a0 *Pipe) {
	_m.Called(_a0)
}

// RunPipe provides a mock function with given fields: workspaceID, serviceID, pipeID, params
func (_m *MockService) RunPipe(workspaceID int, serviceID integrations.ExternalServiceID, pipeID integrations.PipeID, params []byte) error {
	ret := _m.Called(workspaceID, serviceID, pipeID, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, integrations.PipeID, []byte) error); ok {
		r0 = rf(workspaceID, serviceID, pipeID, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetQueuedPipeSynced provides a mock function with given fields: _a0
func (_m *MockService) SetQueuedPipeSynced(_a0 *Pipe) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Pipe) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePipe provides a mock function with given fields: workspaceID, serviceID, pipeID, params
func (_m *MockService) UpdatePipe(workspaceID int, serviceID integrations.ExternalServiceID, pipeID integrations.PipeID, params []byte) error {
	ret := _m.Called(workspaceID, serviceID, pipeID, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, integrations.ExternalServiceID, integrations.PipeID, []byte) error); ok {
		r0 = rf(workspaceID, serviceID, pipeID, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkspaceIntegrations provides a mock function with given fields: workspaceID
func (_m *MockService) WorkspaceIntegrations(workspaceID int) ([]Integration, error) {
	ret := _m.Called(workspaceID)

	var r0 []Integration
	if rf, ok := ret.Get(0).(func(int) []Integration); ok {
		r0 = rf(workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Integration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
