// Code generated by mockery v1.0.0. DO NOT EDIT.

package pipe

import integrations "github.com/toggl/pipes-api/pkg/integrations"
import mock "github.com/stretchr/testify/mock"
import toggl "github.com/toggl/pipes-api/pkg/toggl"

// MockImportsStorage is an autogenerated mock type for the ImportsStorage type
type MockImportsStorage struct {
	mock.Mock
}

// DeleteAccountsFor provides a mock function with given fields: s
func (_m *MockImportsStorage) DeleteAccountsFor(s integrations.ExternalService) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(integrations.ExternalService) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUsersFor provides a mock function with given fields: s
func (_m *MockImportsStorage) DeleteUsersFor(s integrations.ExternalService) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(integrations.ExternalService) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadAccountsFor provides a mock function with given fields: s
func (_m *MockImportsStorage) LoadAccountsFor(s integrations.ExternalService) (*toggl.AccountsResponse, error) {
	ret := _m.Called(s)

	var r0 *toggl.AccountsResponse
	if rf, ok := ret.Get(0).(func(integrations.ExternalService) *toggl.AccountsResponse); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*toggl.AccountsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.ExternalService) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadClientsFor provides a mock function with given fields: s
func (_m *MockImportsStorage) LoadClientsFor(s integrations.ExternalService) (*toggl.ClientsResponse, error) {
	ret := _m.Called(s)

	var r0 *toggl.ClientsResponse
	if rf, ok := ret.Get(0).(func(integrations.ExternalService) *toggl.ClientsResponse); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*toggl.ClientsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.ExternalService) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadProjectsFor provides a mock function with given fields: s
func (_m *MockImportsStorage) LoadProjectsFor(s integrations.ExternalService) (*toggl.ProjectsResponse, error) {
	ret := _m.Called(s)

	var r0 *toggl.ProjectsResponse
	if rf, ok := ret.Get(0).(func(integrations.ExternalService) *toggl.ProjectsResponse); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*toggl.ProjectsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.ExternalService) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadTasksFor provides a mock function with given fields: s
func (_m *MockImportsStorage) LoadTasksFor(s integrations.ExternalService) (*toggl.TasksResponse, error) {
	ret := _m.Called(s)

	var r0 *toggl.TasksResponse
	if rf, ok := ret.Get(0).(func(integrations.ExternalService) *toggl.TasksResponse); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*toggl.TasksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.ExternalService) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadTodoListsFor provides a mock function with given fields: s
func (_m *MockImportsStorage) LoadTodoListsFor(s integrations.ExternalService) (*toggl.TasksResponse, error) {
	ret := _m.Called(s)

	var r0 *toggl.TasksResponse
	if rf, ok := ret.Get(0).(func(integrations.ExternalService) *toggl.TasksResponse); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*toggl.TasksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.ExternalService) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadUsersFor provides a mock function with given fields: s
func (_m *MockImportsStorage) LoadUsersFor(s integrations.ExternalService) (*toggl.UsersResponse, error) {
	ret := _m.Called(s)

	var r0 *toggl.UsersResponse
	if rf, ok := ret.Get(0).(func(integrations.ExternalService) *toggl.UsersResponse); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*toggl.UsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(integrations.ExternalService) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAccountsFor provides a mock function with given fields: s, res
func (_m *MockImportsStorage) SaveAccountsFor(s integrations.ExternalService, res toggl.AccountsResponse) error {
	ret := _m.Called(s, res)

	var r0 error
	if rf, ok := ret.Get(0).(func(integrations.ExternalService, toggl.AccountsResponse) error); ok {
		r0 = rf(s, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveClientsFor provides a mock function with given fields: s, res
func (_m *MockImportsStorage) SaveClientsFor(s integrations.ExternalService, res toggl.ClientsResponse) error {
	ret := _m.Called(s, res)

	var r0 error
	if rf, ok := ret.Get(0).(func(integrations.ExternalService, toggl.ClientsResponse) error); ok {
		r0 = rf(s, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveProjectsFor provides a mock function with given fields: s, res
func (_m *MockImportsStorage) SaveProjectsFor(s integrations.ExternalService, res toggl.ProjectsResponse) error {
	ret := _m.Called(s, res)

	var r0 error
	if rf, ok := ret.Get(0).(func(integrations.ExternalService, toggl.ProjectsResponse) error); ok {
		r0 = rf(s, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTasksFor provides a mock function with given fields: s, res
func (_m *MockImportsStorage) SaveTasksFor(s integrations.ExternalService, res toggl.TasksResponse) error {
	ret := _m.Called(s, res)

	var r0 error
	if rf, ok := ret.Get(0).(func(integrations.ExternalService, toggl.TasksResponse) error); ok {
		r0 = rf(s, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTodoListsFor provides a mock function with given fields: s, res
func (_m *MockImportsStorage) SaveTodoListsFor(s integrations.ExternalService, res toggl.TasksResponse) error {
	ret := _m.Called(s, res)

	var r0 error
	if rf, ok := ret.Get(0).(func(integrations.ExternalService, toggl.TasksResponse) error); ok {
		r0 = rf(s, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUsersFor provides a mock function with given fields: s, res
func (_m *MockImportsStorage) SaveUsersFor(s integrations.ExternalService, res toggl.UsersResponse) error {
	ret := _m.Called(s, res)

	var r0 error
	if rf, ok := ret.Get(0).(func(integrations.ExternalService, toggl.UsersResponse) error); ok {
		r0 = rf(s, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
